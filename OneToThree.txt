Try pulling all the data from the accounts table, and all the data from the orders table.

SELECT orders.*, accounts.*
FROM orders
JOIN accounts
	ON orders.account_id = accounts.id;

Try pulling standard_qty, gloss_qty, and poster_qty from the orders table, and the website and the primary_poc from the accounts table. 

SELECT standard_qty, gloss_qty, poster_qty, accounts.website, accounts.primary_poc
FROM orders
JOIN accounts
	ON orders.account_id = accounts.id;

Provide a table for all web_events associated with account name of Walmart. There should be three columns. Be sure to include the primary_poc, time of the event, and the channel for each event. Additionally, you might choose to add a fourth column to assure only Walmart events were chosen.

SELECT a.primary_poc, w.occurred_at, w.channel, a.name
FROM accounts a
JOIN web_events w
	ON a.id = w.account_id
WHERE a.name = 'Walmart';

Provide a table that provides the region for each sales_rep along with their associated accounts. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name. 

SELECT r.name region, s.name, a.name account
FROM region r
JOIN sales_reps s
	ON r.id = s.region_id
JOIN accounts a
	ON s.id = a.sales_rep_id
ORDER BY a.name;

Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. Your final table should have 3 columns: region name, account name, and unit price. A few accounts have 0 for total, so I divided by (total + 0.01) to assure not dividing by zero.

SELECT r.name region_name, a.name, o.total_amt_usd/(o.total + .001) unit_price
FROM region r
JOIN sales_reps s
	ON r.id = s.region_id
JOIN accounts a
	ON s.id = a.sales_rep_id
JOIN orders o
	ON a.id = o.account_id;

Provide a table that provides the region for each sales_rep along with their associated accounts. This time only for the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name.

SELECT r.name region, s.name, a.name account
FROM region r
JOIN sales_reps s
	ON r.id = s.region_id
    AND r.name = 'Midwest'
JOIN accounts a
	ON s.id = a.sales_rep_id
ORDER BY a.name;

Provide a table that provides the region for each sales_rep along with their associated accounts. This time only for accounts where the sales rep has a first name starting with S and in the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name. 

SELECT r.name region, s.name, a.name account
FROM region r
JOIN sales_reps s
	ON r.id = s.region_id
    AND s.name LIKE 'S%'
    AND r.name = 'Midwest'
JOIN accounts a
	ON s.id = a.sales_rep_id
ORDER BY a.name;

Provide a table that provides the region for each sales_rep along with their associated accounts. This time only for accounts where the sales rep has a last name starting with K and in the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name.

SELECT r.name region, s.name, a.name account
FROM region r
JOIN sales_reps s
	ON r.id = s.region_id
    AND s.name LIKE '% K%'
    AND r.name = 'Midwest'
JOIN accounts a
	ON s.id = a.sales_rep_id
ORDER BY a.name;

Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100. Your final table should have 3 columns: region name, account name, and unit price. In order to avoid a division by zero error, adding .01 to the denominator here is helpful total_amt_usd/(total+0.01). 

SELECT r.name, a.name account, o.total_amt_usd / (o.total + .001) unit_price
FROM region r
JOIN sales_reps s
	ON r.id = s.region_id
JOIN accounts a
	ON s.id = a.sales_rep_id
JOIN orders o
	ON a.id = o.account_id
    AND o.standard_qty > 100

Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100 and the poster order quantity exceeds 50. Your final table should have 3 columns: region name, account name, and unit price. Sort for the smallest unit price first. In order to avoid a division by zero error, adding .01 to the denominator here is helpful (total_amt_usd/(total+0.01). 

SELECT r.name region, a.name account, o.total_amt_usd / (o.total + .001) unit_price
FROM region r
JOIN sales_reps s
	ON r.id = s.region_id
JOIN accounts a
	ON s.id = a.sales_rep_id
JOIN orders o
	ON a.id = o.account_id
    AND o.standard_qty > 100
    AND o.poster_qty > 50
ORDER BY unit_price;

Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100 and the poster order quantity exceeds 50. Your final table should have 3 columns: region name, account name, and unit price. Sort for the largest unit price first. In order to avoid a division by zero error, adding .01 to the denominator here is helpful (total_amt_usd/(total+0.01). 

SELECT r.name region, a.name account, o.total_amt_usd / (o.total + 0.001) unit_price
FROM region r
JOIN sales_reps s
	ON r.id = s.region_id
JOIN accounts a
	ON s.id = a.sales_rep_id
JOIN orders o
	ON a.id = o.account_id
    AND o.standard_qty > 100 AND o.poster_qty > 50
ORDER BY unit_price DESC;

What are the different channels used by account id 1001? Your final table should have only 2 columns: account name and the different channels. You can try SELECT DISTINCT to narrow down the results to only the unique values.

SELECT DISTINCT a.name, w.channel
FROM accounts a
JOIN web_events w
	ON a.id = w.account_id
    AND a.id = 1001;

Find all the orders that occurred in 2015. Your final table should have 4 columns: occurred_at, account name, order total, and order total_amt_usd. 

SELECT o.occurred_at, a.name, o.total, o.total_amt_usd
FROM accounts a
JOIN orders o
	ON a.id = o.account_id
    AND o.occurred_at BETWEEN '2015-01-01' AND '2016-01-01';

When was the earliest order ever placed? You only need to return the date.

SELECT MIN(occurred_at)
FROM orders;

Try performing the same query as in question 1 without using an aggregation function. 

SELECT occurred_at
FROM orders o
ORDER BY o.occurred_at
LIMIT 1;

When did the most recent (latest) web_event occur?

SELECT MAX(occurred_at)
FROM web_events;

Try to perform the result of the previous query without using an aggregation function.

SELECT occurred_at
FROM web_events
ORDER BY occurRed_at DESC
LIMIT 1;

Find the mean (AVERAGE) amount spent per order on each paper type, as well as the mean amount of each paper type purchased per order. Your final answer should have 6 values - one for each paper type for the average number of sales, as well as the average amount.

SELECT AVG(standard_amt_usd) standard_avg, AVG(gloss_amt_usd) glossy_avg, AVG(poster_amt_usd) poster_avg, AVG(standard_qty) avg_standard, AVG(gloss_qty) avg_glossy, AVG(poster_qty) avg_poster
FROM orders

Which account (by name) placed the earliest order? Your solution should have the account name and the date of the order.

SELECT a.name, o.occurred_at
FROM accounts a
JOIN orders o
	ON a.id = o.account_id
ORDER BY o.occurred_at
LIMIT 1;

Find the total sales in usd for each account. You should include two columns - the total sales for each company's orders in usd and the company name.

SELECT a.name, SUM(o.total_amt_usd)
FROM accounts a
JOIN orders o
	ON a.id = o.account_id
GROUP BY a.name;

Via what channel did the most recent (latest) web_event occur, which account was associated with this web_event? Your query should return only three values - the date, channel, and account name.

SELECT w.occurred_at, w.channel, a.name
FROM web_events w
JOIN accounts a
	ON w.account_id = a.id
ORDER BY w.occurred_at DESC
LIMIT 1;

Find the total number of times each type of channel from the web_events was used. Your final table should have two columns - the channel and the number of times the channel was used.

SELECT w.channel, COUNT(*)
FROM web_events w
GROUP BY w.channel;

Who was the primary contact associated with the earliest web_event? 

SELECT a.primary_poc, w.occurred_at
FROM accounts a
JOIN web_events w
	ON a.id = w.account_id
ORDER BY w.occurred_at
LIMIT 1;

Find the number of sales reps in each region. Your final table should have two columns - the region and the number of sales_reps. Order from fewest reps to most reps.

SELECT r.name region, COUNT(*) num_reps
FROM region r
JOIN sales_reps s
	ON r.id = s.region_id
GROUP BY r.name;

What was the smallest order placed by each account in terms of total usd. Provide only two columns - the account name and the total usd. Order from smallest dollar amounts to largest.

SELECT a.name, MIN(o.total_amt_usd)
FROM accounts a
JOIN orders o
	ON a.id = o.account_id
GROUP BY a.name;

For each account, determine the average amount of each type of paper they purchased across their orders. Your result should have four columns - one for the account name and one for the average quantity purchased for each of the paper types for each account. 

SELECT a.name, AVG(o.standard_qty), AVG(o.gloss_qty), AVG(o.poster_qty)
FROM accounts a
JOIN orders o
	ON a.id = o.account_id
GROUP BY a.name;

For each account, determine the average amount spent per order on each paper type. Your result should have four columns - one for the account name and one for the average amount spent on each paper type.

SELECT a.name, AVG(o.standard_amt_usd), AVG(o.gloss_amt_usd), AVG(o.poster_amt_usd)
FROM accounts a
JOIN orders o
	ON a.id = o.account_id
GROUP BY a.name;

Determine the number of times a particular channel was used in the web_events table for each sales rep. Your final table should have three columns - the name of the sales rep, the channel, and the number of occurrences. Order your table with the highest number of occurrences first.

SELECT s.name rep, w.channel, COUNT(*) occurences
FROM sales_reps s
JOIN accounts a
	ON s.id = a.sales_rep_id
JOIN web_events w
	ON a.id = w.account_id
GROUP BY s.name, w.channel
ORDER BY occurences DESC;

Determine the number of times a particular channel was used in the web_events table for each region. Your final table should have three columns - the region name, the channel, and the number of occurrences. Order your table with the highest number of occurrences first.

SELECT r.name , w.channel, COUNT(*) occurences
FROM region r
JOIN sales_reps s
	ON r.id = s.region_id
JOIN accounts a
	ON s.id = a.sales_rep_id
JOIN web_events w
	ON a.id = w.account_id
GROUP BY r.name, w.channel
ORDER BY occurences DESC;

Use DISTINCT to test if there are any accounts associated with more than one region.

SELECT DISTINCT r.name, a.name accounts
FROM region r
JOIN sales_reps s
	ON r.id = s.region_id
JOIN accounts a
	ON s.id = a.sales_rep_id
ORDER BY a.name;

Have any sales reps worked on more than one account? (yes)

select s.*, a.name accounts
from sales_reps s
JOIN accounts a
	ON s.id = a.sales_rep_id
ORDER BY s.name;

How many of the sales reps have more than 5 accounts that they manage? (34)

SELECT s.id, COUNT(*) accounts
FROM sales_reps s
JOIN accounts a
	ON s.id = a.sales_rep_id
GROUP BY s.id
HAVING COUNT(*) > 5
ORDER BY accounts;

How many accounts have more than 20 orders? (120)

SELECT a.name, COUNT(*) order_amt
FROM accounts a
JOIN orders o
	ON a.id = o.account_id
GROUP BY a.name
HAVING COUNT(*) > 20
ORDER BY order_amt;

Which account has the most orders? (Leucadia National with 71 orders)

SELECT a.name, COUNT(*) order_amt
FROM accounts a
JOIN orders o
	ON a.id = o.account_id
GROUP BY a.name
ORDER BY order_amt DESC
LIMIT 1;

Which accounts spent more than 30,000 usd total across all orders? (204 OF THEM)

SELECT a.name, SUM(o.total_amt_usd) total_amt
FROM accounts a
JOIN orders o
	ON a.id = o.account_id
GROUP BY a.name
HAVING SUM(o.total_amt_usd) > 30000
ORDER BY total_amt;

Which accounts spent less than 1,000 usd total across all orders? (3 of them)

SELECT a.name, SUM(o.total_amt_usd) total_amt
FROM accounts a
JOIN orders o
	ON a.id = o.account_id
GROUP BY a.name
HAVING SUM(o.total_amt_usd) < 1000
ORDER BY total_amt DESC;

Which account has spent the most with us? (EOG Resources with 382,873.30)

SELECT a.name, SUM(o.total_amt_usd) total_amt
FROM accounts a
JOIN orders o
	ON a.id = o.account_id
GROUP BY a.name
ORDER BY total_amt DESC
LIMIT 1;

Which account has spent the least with us? (Nike with 390.25)

SELECT a.name, SUM(o.total_amt_usd) total_amt
FROM accounts a
JOIN orders o
	ON a.id = o.account_id
GROUP BY a.name
ORDER BY total_amt
LIMIT 1;

Which accounts used facebook as a channel to contact customers more than 6 times? (46 of them)

SELECT a.name, COUNT(*) facebook_use
FROM accounts a
JOIN web_events w
	ON a.id = w.account_id
    AND w.channel = 'facebook'
GROUP BY a.name
HAVING COUNT(*) > 6
ORDER BY facebook_use;

Which account used facebook most as a channel? (Gilead Sciences with 16)

SELECT a.name, COUNT(*) channel
FROM accounts a
JOIN web_events w
	ON a.id = w.account_id
    AND w.channel = 'facebook'
GROUP BY a.name
ORDER BY channel DESC
LIMIT 1;

Which channel was most frequently used by most accounts? (Direct with 52 uses by Leucadia National)

SELECT a.name, w.channel, COUNT(*) uses
FROM accounts a
JOIN web_events w
	ON a.id = w.account_id
GROUP BY a.name, w.channel
ORDER BY uses DESC
LIMIT 1;

Find the sales in terms of total dollars for all orders in each year, ordered from greatest to least. Do you notice any trends in the yearly sales totals?

SELECT DATE_TRUNC('year', occurred_at), SUM(total_amt_usd)
FROM orders 
GROUP BY 1
ORDER BY 2 DESC;
NOTE: I could've used DATE_PART to extract just the year for a cleaner look / PROJECT

Which month did Parch & Posey have the greatest sales in terms of total dollars? Are all months evenly represented by the dataset? (December of 2016. No

SELECT DATE_TRUNC('month',occurred_at), SUM(total_amt_usd)
FROM orders
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

      SELECT DATE_TRUNC('day',occurRed_at), SUM(total_amt_usd) --> shows that months aren't evenly represented by data
      FROM orders
      GROUP BY 1
      ORDER BY 1 DESC;

Which year did Parch & Posey have the greatest sales in terms of total number of orders? Are all years evenly represented by the dataset? (2016 and no because of the reason above)

SELECT DATE_TRUNC('year',occurred_at), SUM(total_amt_usd)
FROM orders
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

Which month did Parch & Posey have the greatest sales in terms of total number of orders? Are all months evenly represented by the dataset? (December of 2016 with 463 and no)

SELECT DATE_TRUNC('month',occurred_at), COUNT(*)
FROM orders
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

     SELECT DATE_TRUNC('day',occurRed_at), SUM(total_amt_usd) ---> Shows that 2017 has 2 days of data
     FROM orders
     GROUP BY 1
     ORDER BY 1 DESC;

In which month of which year did Walmart spend the most on gloss paper in terms of dollars? (May of 2016 with 9,257.64)

SELECT DATE_TRUNC('month',occurred_at), SUM(gloss_amt_usd)
FROM orders o
JOIN accounts a
	ON o.account_id = a.id
    AND a.name = 'Walmart'
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

Write a query to display for each order, the account ID, total amount of the order, and the level of the order - ‘Large’ or ’Small’ - depending on if the order is $3000 or more, or smaller than $3000.

SELECT o.id, o.account_id, o.total_amt_usd, 
CASE WHEN o.total_amt_usd>= 3000 THEN 'Large'
ELSE 'Small' END AS order_level
FROM orders o;

Write a query to display the number of orders in each of three categories, based on the total number of items in each order. The three categories are: 'At Least 2000', 'Between 1000 and 2000' and 'Less than 1000'.

SELECT CASE WHEN total >= 2000 THEN 'At Least 2000'
WHEN total >= 1000 AND total < 2000 THEN 'Between 1000 and 2000'
ELSE 'Less than 1000' END AS order_category, count(*) num_orders
FROM orders o
GROUP BY 1;

We would like to understand 3 different levels of customers based on the amount associated with their purchases. The top level includes anyone with a Lifetime Value (total sales of all orders) greater than 200,000 usd. The second level is between 200,000 and 100,000 usd. The lowest level is anyone under 100,000 usd. Provide a table that includes the level associated with each account. You should provide the account name, the total sales of all orders for the customer, and the level. Order with the top spending customers listed first.

SELECT a.name, SUM(o.total_amt_usd) total_orders,
CASE WHEN SUM(o.total_amt_usd) > 200000 THEN 'High'
WHEN SUM(o.total_amt_usd) BETWEEN 100000 AND 200000 THEN 'Medium'
ELSE 'Low' END AS LV
FROM accounts a
JOIN orders o
	ON a.id = o.account_id
GROUP BY 1
ORDER BY total_orders DESC;

We would now like to perform a similar calculation to the first, but we want to obtain the total amount spent by customers only in 2016 and 2017. Keep the same levels as in the previous question. Order with the top spending customers listed first.

SELECT a.name, SUM(o.total_amt_usd) total_orders,
CASE WHEN SUM(o.total_amt_usd) > 200000 THEN 'High'
WHEN SUM(o.total_amt_usd) >= 100000 AND SUM(o.total_amt_usd) <= 200000 THEN 'Medium'
ELSE 'Low' END AS LV
FROM accounts a
JOIN orders o
	ON a.id = o.account_id
    AND o.occurred_at BETWEEN '2016-01-01' AND '2018-01-01'
GROUP BY 1
ORDER BY total_orders DESC;

We would like to identify top performing sales reps, which are sales reps associated with more than 200 orders. Create a table with the sales rep name, the total number of orders, and a column with top or not depending on if they have more than 200 orders. Place the top sales people first in your final table.

SELECT s.name, COUNT(*),
CASE WHEN COUNT(*) > 200 THEN 'top'
ELSE 'not' END AS performance
FROM sales_reps s
JOIN accounts a
	ON s.id = a.sales_rep_id
JOIN orders o
	ON a.id = o.account_id
GROUP BY 1
ORDER BY 2 DESC;

The previous didn't account for the middle, nor the dollar amount associated with the sales. Management decides they want to see these characteristics represented as well. We would like to identify top performing sales reps, which are sales reps associated with more than 200 orders or more than 750000 in total sales. The middle group has any rep with more than 150 orders or 500000 in sales. Create a table with the sales rep name, the total number of orders, total sales across all orders, and a column with top, middle, or low depending on this criteria. Place the top sales people based on dollar amount of sales first in your final table. You might see a few upset sales people by this criteria!

SELECT s.name, COUNT(*), SUM(o.total_amt_usd),
CASE WHEN COUNT(*) > 200 OR SUM(o.total_amt_usd) > 750000 THEN 'top'
WHEN COUNT(*) BETWEEN 150 AND 200 OR SUM(o.total_amt_usd) BETWEEN 500000 AND 750000 THEN 'middle'
ELSE 'not' END AS performance
FROM sales_reps s
JOIN accounts a
	ON s.id = a.sales_rep_id
JOIN orders o
	ON a.id = o.account_id
GROUP BY 1
ORDER BY 3 DESC;